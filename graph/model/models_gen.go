// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Bug struct {
	ID       string     `json:"id"`
	Name     string     `json:"name"`
	Products []*Product `json:"products"`
}

type BugFilter struct {
	ID   []string          `json:"id"`
	Name *StringTermFilter `json:"name"`
	Has  []*BugHasFilter   `json:"has"`
	And  []*BugFilter      `json:"and"`
	Or   []*BugFilter      `json:"or"`
	Not  *BugFilter        `json:"not"`
}

type BugOrder struct {
	Asc  *BugOrderable `json:"asc"`
	Desc *BugOrderable `json:"desc"`
	Then *BugOrder     `json:"then"`
}

type DateTimeFilter struct {
	Eq      *string        `json:"eq"`
	In      []*string      `json:"in"`
	Le      *string        `json:"le"`
	Lt      *string        `json:"lt"`
	Ge      *string        `json:"ge"`
	Gt      *string        `json:"gt"`
	Between *DateTimeRange `json:"between"`
}

type DateTimeRange struct {
	Min string `json:"min"`
	Max string `json:"max"`
}

type Product struct {
	ID   string `json:"id"`
	Name string `json:"name"`
	Bugs []*Bug `json:"bugs"`
}

type ProductFilter struct {
	ID   []string            `json:"id"`
	Name *StringTermFilter   `json:"name"`
	Has  []*ProductHasFilter `json:"has"`
	And  []*ProductFilter    `json:"and"`
	Or   []*ProductFilter    `json:"or"`
	Not  *ProductFilter      `json:"not"`
}

type ProductOrder struct {
	Asc  *ProductOrderable `json:"asc"`
	Desc *ProductOrderable `json:"desc"`
	Then *ProductOrder     `json:"then"`
}

type StringTermFilter struct {
	Allofterms *string `json:"allofterms"`
	Anyofterms *string `json:"anyofterms"`
}

type BugHasFilter string

const (
	BugHasFilterName BugHasFilter = "name"
)

var AllBugHasFilter = []BugHasFilter{
	BugHasFilterName,
}

func (e BugHasFilter) IsValid() bool {
	switch e {
	case BugHasFilterName:
		return true
	}
	return false
}

func (e BugHasFilter) String() string {
	return string(e)
}

func (e *BugHasFilter) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BugHasFilter(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BugHasFilter", str)
	}
	return nil
}

func (e BugHasFilter) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type BugOrderable string

const (
	BugOrderableName BugOrderable = "name"
)

var AllBugOrderable = []BugOrderable{
	BugOrderableName,
}

func (e BugOrderable) IsValid() bool {
	switch e {
	case BugOrderableName:
		return true
	}
	return false
}

func (e BugOrderable) String() string {
	return string(e)
}

func (e *BugOrderable) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = BugOrderable(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid BugOrderable", str)
	}
	return nil
}

func (e BugOrderable) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductHasFilter string

const (
	ProductHasFilterName ProductHasFilter = "name"
)

var AllProductHasFilter = []ProductHasFilter{
	ProductHasFilterName,
}

func (e ProductHasFilter) IsValid() bool {
	switch e {
	case ProductHasFilterName:
		return true
	}
	return false
}

func (e ProductHasFilter) String() string {
	return string(e)
}

func (e *ProductHasFilter) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductHasFilter(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductHasFilter", str)
	}
	return nil
}

func (e ProductHasFilter) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ProductOrderable string

const (
	ProductOrderableName ProductOrderable = "name"
)

var AllProductOrderable = []ProductOrderable{
	ProductOrderableName,
}

func (e ProductOrderable) IsValid() bool {
	switch e {
	case ProductOrderableName:
		return true
	}
	return false
}

func (e ProductOrderable) String() string {
	return string(e)
}

func (e *ProductOrderable) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ProductOrderable(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ProductOrderable", str)
	}
	return nil
}

func (e ProductOrderable) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
